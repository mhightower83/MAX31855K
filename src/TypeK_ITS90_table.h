#ifndef TYPEK_ITS90_TABLE_H
#define TYPEK_ITS90_TABLE_H
//////////////////////////////////////////////////////////////////////////////
// Things the linter cannot find  ¯\_(ツ)_/¯
#ifdef GCC_LINTER
#define FLT_MAX		__FLT_MAX__
#define DFLOAT float
#endif

#ifndef PROGMEM
#define PROGMEM
#endif

/*
  This module incorporates information from the "NIST ITS-90 Thermocouple Database".
  You can reach their web site at:
    https://srdata.nist.gov/its90/main/its90_main_page.html

  Of the  NIST Tables and coefficients, this module uses the polynomial
  coefficients that model the Type K thermocouple for:
    * convert, temperature in °C to a predicted thermocouple mV reading
    * inverse convert, thermocouple mV reading to a temperature in °C

  From https://srdata.nist.gov/its90/download/allcoeff.tab
*/


////////////////////////////////////////////////////////////////////////////////
//     convert, temperature in °C to a predicted thermocouple mV reading
/*
  Summary:  This part takes a temperature in Celsius and predicts the voltage
  that would be generated by a Type K thermocouple. This is used to convert the
  MAX31855K Device Internal temperature to the equivalent non-linearized voltage
  in mV that a real cold-junction thermocouple would have produced.

  Total range support: -270 to 1372 °C.
*/

/*
From NIST: https://srdata.nist.gov/its90/download/allcoeff.tab
***********************************************************************
* This section contains coefficients for type K thermocouples for
* the two subranges of temperature listed below. The coefficients
* are in units of °C and mV and are listed in the order of constant
* term up to the highest order. The equation below 0 °C is of the form
* E = sum(i=0 to n) c_i t^i.
*
* The equation above 0 °C is of the form
* E = sum(i=0 to n) c_i t^i + a0 exp(a1 (t - a2)^2).
*
*     Temperature Range (°C)
*        -270.000 to 0.000
*         0.000 to 1372.000
***********************************************************************
  name: reference function on ITS-90
  type: K
  temperature units: °C
  emf units: mV
*/

/*
  range: -270.000 to 0.000 °C, 10 coefficients
*/
constexpr DFLOAT c_m270[] PROGMEM = {
       0.000000000000E+00,
       0.394501280250E-01,
       0.236223735980E-04,
      -0.328589067840E-06,
      -0.499048287770E-08,
      -0.675090591730E-10,
      -0.574103274280E-12,
      -0.310888728940E-14,
      -0.104516093650E-16,
      -0.198892668780E-19,
      -0.163226974860E-22};


/*
  range: 0.000 to 1372.000 °C, 9 coefficients
*/
constexpr DFLOAT c_0[] PROGMEM = {
      -0.176004136860E-01,
       0.389212049750E-01,
       0.185587700320E-04,
      -0.994575928740E-07,
       0.318409457190E-09,
      -0.560728448890E-12,
       0.560750590590E-15,
      -0.320207200030E-18,
       0.971511471520E-22,
      -0.121047212750E-25};


/*
  exponential for range: 0.000 to 1372.000 °C:
*/
constexpr DFLOAT a0 PROGMEM =  0.118597600000E+00;
constexpr DFLOAT a1 PROGMEM = -0.118343200000E-03;
constexpr DFLOAT a2 PROGMEM =  0.126968600000E+03;

///////////////////////////////////////////////////////////////////////////////
//    inverse convert, thermocouple mV reading to a temperature in °C
/*
  Summary:  One equation and three tables (sets) of coefficients yielding a
  linearized temperature in Celsius from a voltage measument in mV. There are
  three sets of coefficients. Each set is tuned to convert a specific voltage
  range.

  They refer to these as "Inverse coefficients". It turns a non-linear
  thermocouple voltage (mV) into a linearized temperature in Celsius.
  It is the inverse of the above table which takes a temperature and predicts
  the thermocouple voltage in mV.

  Total range support: -200 to 1372 °C.
*/

/*
From NIST: https://srdata.nist.gov/its90/download/allcoeff.tab
***********************************************************************
* This section contains coefficients of approximate inverse
* functions for type K thermocouples for the subranges of
* temperature and voltage listed below. The range of errors of
* the approximate inverse function for each subrange is also given.
* The coefficients are in units of °C and mV and are listed in
* the order of constant term up to the highest order.
* The equation is of the form t_90 = d_0 + d_1*E + d_2*E^2 + ...
*     + d_n*E^n,
* where E is in mV and t_90 is in °C.
*
*    Temperature        Voltage            Error
*      range              range            range
*      (°C)               (mV)             (° C)
*    -200. to 0.      -5.891 to 0.000    -0.02 to 0.04
*     0. to 500.      0.000 to 20.644    -0.05 to 0.04
*     500. to 1372.   20.644 to 54.886   -0.05 to 0.06
***********************************************************************
  Inverse coefficients for type K:
*/

/*
  Temperature Range:  -200. to 0.
  Voltage Range:     -5.891 to 0.000
  Error Range:        -0.02 to 0.04
*/
constexpr DFLOAT d_m6_0[] PROGMEM = {
       0.0000000E+00,
       2.5173462E+01,
      -1.1662878E+00,
      -1.0833638E+00,
      -8.9773540E-01,
      -3.7342377E-01,
      -8.6632643E-02,
      -1.0450598E-02,
      -5.1920577E-04,
       0.0000000E+00};

/*
  Temperature Range:     0. to 500.
  Voltage Range:      0.000 to 20.644
  Error Range:        -0.05 to 0.04
*/
constexpr DFLOAT d_0_21[] PROGMEM = {
       0.000000E+00,
       2.508355E+01,
       7.860106E-02,
      -2.503131E-01,
       8.315270E-02,
      -1.228034E-02,
       9.804036E-04,
      -4.413030E-05,
       1.057734E-06,
      -1.052755E-08};

/*
  Temperature Range:   500. to 1372.
  Voltage Range:     20.644 to 54.886
  Error Range:        -0.05 to 0.06
*/
constexpr DFLOAT d_21_55[] PROGMEM = {
      -1.318058E+02,
       4.830222E+01,
      -1.646031E+00,
       5.464731E-02,
      -9.650715E-04,
       8.802193E-06,
      -3.110810E-08,
       0.000000E+00,
       0.000000E+00,
       0.000000E+00};
//
///////////////////////////////////////////////////////////////////////////////
#endif
